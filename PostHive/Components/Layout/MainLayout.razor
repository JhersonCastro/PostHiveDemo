@inherits LayoutComponentBase
@using PostHive.Components.Pages.Tags.Dialogs
@using Services
@inject ThemeState ThemeState
@inject UserState UserState
@inject CookiesService CookiesService
@inject PostService PostService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

@* Required *@
<MudThemeProvider @bind-IsDarkMode="@ThemeState.IsDark" />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />
@if (Loading)
{
    <PostHive.Components.Pages.Tags.Utils.SpinCircle></PostHive.Components.Pages.Tags.Utils.SpinCircle>
}
else
{
    <NavMenu>
        <ChildContent>
            <MudSwitch @bind-Value="@ThemeState.IsDark" Class="col-auto" Color="Color.Primary" ThumbIcon="@Icons.Material.Filled.Brightness4"></MudSwitch>
        </ChildContent>
        <UserIcon>
            @if(UserState.CurrentUser != null)
            {
                <MudMenu>
                    <ActivatorContent>
                        <MudAvatar Size="Size.Large" Style="">
                            <MudImage Src="@($"{Const.url}/Doctypes/Avatars/{UserState.CurrentUser.Avatar}")" 
                                      Style="max-height:200px;"></MudImage>
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Href="@($"/profile")">Profile</MudMenuItem>
                        <MudMenuItem Href="@($"/Settings")">Settings</MudMenuItem>
                        <MudMenuItem OnClick="async() => await Logout()">Logout</MudMenuItem>
                    </ChildContent>
                </MudMenu>               
            }
        </UserIcon>
    </NavMenu>
}

@Body



@code {
    protected override void OnInitialized()
    {
        ThemeState.IsDark = true;
        base.OnInitialized();
    }
    //TODO: make a dialog for logout confirmation
    private async Task Logout()
    {
        var response = await DialogService.ShowAsync<ConfirmDialog>("Logout", new DialogParameters
        {
            { "Title", "Logout" },
            { "Content", "Are you sure you want logout now?" }
        });
        var result = await response.Result;
        if(result.Canceled)
            return;
        
        await CookiesService.RemoveLocalCookies();
        NavigationManager.NavigateTo("/", true);
    }
    public bool Loading { get; set; } = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UserState.CurrentUser = await CookiesService.RetrievedUser(UserState.CurrentUser);
            if (UserState.CurrentUser == null)
            {
                Loading = false;
                StateHasChanged();
                return;
            }
            foreach (var friend in UserState.CurrentUser.Friends)
            {
                friend.Posts = await PostService.GetPostsAsync(friend, UserState.CurrentUser);
            }

            Loading = false;
            StateHasChanged();
        }
    }
}