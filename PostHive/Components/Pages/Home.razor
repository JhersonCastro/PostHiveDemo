@page "/"  
@using PostHive.Services  
@inject UserState UserState  
@inject PostService PostService
@inject CookiesService CookiesService
@inject NavigationManager NavigationManager
<PageTitle>Home</PageTitle>  
@if (Loading)
{
    <PostHive.Components.Pages.Tags.Utils.SpinCircle></PostHive.Components.Pages.Tags.Utils.SpinCircle>
}
else
{
    @if(UserState.CurrentUser != null )
    {

        foreach (var friend in UserState.CurrentUser.Friends)
        {
            @foreach (var friendPost in friend.Posts)
            {
                <PostHive.Components.Pages.Tags.Posts.Post CurrentPost="friendPost" CurrentUser="UserState.CurrentUser">
                </PostHive.Components.Pages.Tags.Posts.Post>
                <div style="margin-top: 3rem;"></div>
            }
        }
    }
    else
    {
        NavigationManager.NavigateTo("/Auth", true);
    }
}

@code{
    public bool Loading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
            UserState.CurrentUser = await CookiesService.RetrievedUser(UserState.CurrentUser);
            if (UserState.CurrentUser == null)
            {
                Loading = false;
                StateHasChanged();
                return;
            }
            foreach (var friend in UserState.CurrentUser.Friends)
            {
                friend.Posts = await PostService.GetPostsAsync(friend, UserState.CurrentUser);
            }

            Loading = false;
            StateHasChanged();
        
    }
}
