@page "/"  
@using PostHive.Services  
@inject UserState UserState  
@inject CookiesService CookiesService  
@inject PostService PostService
<PageTitle>Home</PageTitle>  

@if (Loading)
{
    <PostHive.Components.Pages.Tags.Utils.SpinCircle></PostHive.Components.Pages.Tags.Utils.SpinCircle>
}
else
{
    <p>Page under maintenance</p>
    <p>
        Please go to
        <MudLink Href="/auth"> this page to register or login</MudLink>
    </p>

    <p>
        Please go to
        <MudLink Href="/profile"> this page to see your profile once registered or logged in</MudLink>
    </p>

    <p>
        Please go to
        <MudLink Href="/Chats/CommunityChat"> this page to enter the community chat (warning, reloading the page will lose all messages)</MudLink>
    </p>
    @if(UserState.CurrentUser != null)
    {

        foreach (var friend in UserState.CurrentUser.Friends)
        {
            @foreach (var friendPost in friend.Posts)
            {
                <PostHive.Components.Pages.Tags.Posts.Post CurrentPost="friendPost" CurrentUser="UserState.CurrentUser">
                </PostHive.Components.Pages.Tags.Posts.Post>
                <div style="margin-top: 3rem;"></div>
            }
        }
    }
}


@code{
    public bool Loading { get; set; } = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UserState.CurrentUser = await CookiesService.RetrievedUser(UserState.CurrentUser);
            if (UserState.CurrentUser == null)
            {
                Loading = false;
                StateHasChanged();
                return;
            }
            foreach (var friend in UserState.CurrentUser.Friends)
            {
                friend.Posts = await PostService.GetPostsAsync(friend, UserState.CurrentUser);
            }

            Loading = false;
            StateHasChanged();
        }
    }
}