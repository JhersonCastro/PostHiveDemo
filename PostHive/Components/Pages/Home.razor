@page "/"  
@using PostHive.Services  
@inject UserState UserState  
@inject PostService PostService
@inject CookiesService CookiesService
@inject NavigationManager NavigationManager
<PageTitle>Home</PageTitle>  
@if (Loading)
{
    <PostHive.Components.Pages.Tags.Utils.SpinCircle></PostHive.Components.Pages.Tags.Utils.SpinCircle>
}
else
{
    @if(UserState.CurrentUser != null)
    {
        if(UserState.CurrentUser.Friends == null || !UserState.CurrentUser.Friends.Any())
        {
            <p class="text-center">You have no friends yet. Start connecting with others!</p>
        }
        else
        {
            List<Post> posts = UserState.CurrentUser.Friends
            .Where(f => f.Posts != null)
            .SelectMany(f => f.Posts!)
            .ToList();
            foreach (var post in posts.OrderByDescending(p => p.CreatedDate))
            {
                <PostHive.Components.Pages.Tags.Posts.Post CurrentPost="post" CurrentUser="UserState.CurrentUser">
                </PostHive.Components.Pages.Tags.Posts.Post>
                <div style="margin-top: 3rem;"></div>
            }
        }
    }
    else
    {
        NavigationManager.NavigateTo("/Auth", true);
    }
}

@code{
    public bool Loading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        UserState.CurrentUser = await CookiesService.RetrievedUser(UserState.CurrentUser);
        if (UserState.CurrentUser == null)
        {
            Loading = false;
            StateHasChanged();
            return;
        }
        foreach (var friend in UserState.CurrentUser.Friends)
        {
            if (friend != null) 
            {
                friend.Posts = await PostService.GetPostsAsync(friend, UserState.CurrentUser);
            }
        }

        Loading = false;
        StateHasChanged();
    }
}
